#!/usr/bin/python3

import xml.etree.ElementTree as ET
import os.path
from typing import List

# --- CONFIGURATION VARIABLES START ---

MESON_PROJECT = "voidsprite"
# SUBVARS allows for creating separate source variables for subfolders
SUBVARS = []

# we ignore vendored library sources since we build them with subprojects
# (or don't build them at all, if we use system libraries or meson wraps)
IGNORED = ["libpng", "pugixml", "liblcf", "libtga"]

START = """## --- vcxproj-to-meson start ---
## AUTOGENERATED WITH vcxproj_to_meson.py
## DO NOT MODIFY MANUALLY, DO NOT REMOVE THIS COMMENT!"""

END = """## END OF AUTOGENERATED SECTION
## DO NOT MODIFY MANUALLY, DO NOT REMOVE THIS COMMENT!
## --- vcxproj-to-meson end ---"""

# --- CONFIGURATION VARIABLES END ---

for checkpath in ("freesprite.vcxproj", "meson.build"):
    if not os.path.exists(checkpath):
        print(f"Couldn't find file {checkpath}, are you in the source folder?")
        quit(1)

root = ET.parse("freesprite.vcxproj").getroot()
namespace = {"": "http://schemas.microsoft.com/developer/msbuild/2003"}

sources = []

for target in root.iterfind("ItemGroup/ClCompile", namespace):
    source_filename = target.attrib["Include"].replace("\\", "/")
    sources.append(source_filename)


meson_sources = {MESON_PROJECT: []}

def source_list_to_str(sources: List[str], var_name: str) -> str:
    out = f"{var_name}_sources = files(\n"
    for source in sources:
        if "/" in source:
            out += f"  join_paths('" + "', '".join(source.split("/")) + "'),\n"
        else:
            out += f"  '{source}',\n"
    out += ")\n"

    return out

for source in sources:
    if source.split("/")[0] in IGNORED:
        continue
    elif source.split("/")[0] in SUBVARS:
        # Handle vendored dependencies as separate sources
        lib = source.split("/")[0]
        if lib not in meson_sources:
            meson_sources[lib] = []

        meson_sources[lib].append(source)
    else:
        meson_sources[MESON_PROJECT].append(source)

generated_out = ""
for sourcevar, sources in meson_sources.items():
    generated_out += source_list_to_str(sources, sourcevar) + '\n'

generated_out = START + "\n\n" + generated_out.strip() + "\n\n" + END

meson_out = ""
in_autogen_section = False
found_autogen = False
with open("meson.build") as meson_file:
    for line in meson_file.read().split('\n'):
        if not in_autogen_section:
            if line == START.split('\n')[0]:
                if found_autogen:
                    print("Autogenerated section found twice, please fix meson.build manually and try again")
                    quit(1)
                in_autogen_section = True
                found_autogen = True
                continue
        else:
            if line == END.split('\n')[-1]:
                in_autogen_section = False
                meson_out += generated_out + "\n"
            continue

        meson_out += line + "\n"

    meson_out = meson_out.strip() + "\n"

if not found_autogen:
    print("Autogenerated section not found, please add the following two lines where you'd like the code to be included:")

    print(START.split('\n')[0])
    print()
    print(END.split('\n')[-1])

    quit(1)

with open("meson.build", "w") as meson_file:
    meson_file.write(meson_out)
